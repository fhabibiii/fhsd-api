generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  username     String       @unique
  passwordHash String       @map("password_hash")
  role         String       @default("admin")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @default(now()) @map("updated_at")
  authTokens   AuthToken[]

  @@map("users")
}

model Project {
  id          String   @id @default(uuid())
  title       String
  description String
  image       String
  link        String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  @@map("projects")
}

model Service {
  id          String           @id @default(uuid())
  title       String
  description String
  price       String
  duration    String
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @default(now()) @map("updated_at")
  features    ServiceFeature[]

  @@map("services")
}

model ServiceFeature {
  id        String   @id @default(uuid())
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String
  feature   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("service_features")
}

model Message {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String
  type      String
  budget    String
  detail    String
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("messages")
}

model ContactInfo {
  id         String   @id @default(uuid())
  phone      String
  email      String
  address    String
  map        String   @db.Text
  instagram  String
  whatsApp   String
  workHours  String
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("contact_info")
}

model AuthToken {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshToken String   @unique @map("refresh_token") @db.VarChar(500)
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("auth_tokens")
}

model BlacklistedToken {
  id        String   @id @default(uuid())
  token     String   @unique @db.VarChar(500)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("blacklisted_tokens")
}
